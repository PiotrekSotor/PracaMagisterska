{
    "collab_server" : "",
    "contents" : "my_gaMonitor <- function(object, digits = getOption(\"digits\"), ...){\n  iterationsSoFar <<- iterationsSoFar+1\n  progress <- as.double(iterationsSoFar/allIterationNumber)\n  endTime<-proc.time()\n  elapsed<-toString(  round( x = ((endTime-startTime)[\"elapsed\"]) , digits = 1)  )\n  \n  fitness <- na.exclude(object@fitness)\n  # cat(numberOfRun,elapsed)\n  # cat(resultsInTime[numberOfRun,elapsed,\"bestSolution\"])\n  resultsInTime[numberOfRun,elapsed,\"bestSolution\"] <<- max(fitness)\n  resultsInTime[numberOfRun,elapsed,\"meanSolution\"] <<- mean(fitness)\n  \n  \n  sumryStat <- c(mean(fitness), max(fitness))\n  sumryStat <- format(sumryStat, digits = digits)\n  replicate(5, clearConsoleLine())\n  cat(paste(\"\\rGA | iter =\", object@iter, \"\\n\"))\n  cat(paste(\"Mean =\", sumryStat[1], \"| Best =\", sumryStat[2], \"\\nProgress =\" , progress, \"| Numbers: \", iterationsSoFar,\"/\",allIterationNumber,\"\\nElapsed: \", elapsed,\"\\n\"))\n  flush.console()\n}\n\niterationsSoFar<-0\niterations<-10\nallIterationNumber<-100*iterations\n\npossibleTimes <- seq(0,20, by=0.1)\nnumberOfRun <- seq(1,iterations, by=1)\ncollectedValues<-c(\"bestSolution\", \"meanSolution\")\n\n\nresultsInTime<- array(dimnames = list(numberOfRun = numberOfRun, time=possibleTimes, values=collectedValues),\n                      dim = c(length(numberOfRun),length(possibleTimes), length(collectedValues))\n                      )\navrInTime<- array(dimnames = list(time=possibleTimes, values=collectedValues),\n                      dim = c(length(possibleTimes), length(collectedValues))\n)\n\n\nfor (i in 1:iterations){\n  numberOfRun<-i\n  startTime<-proc.time()\n  \n  ga(type = \"real-valued\", \n                 fitness = McCormic, \n                 min = c(-5,-5), max=c(5,5),\n                 monitor = my_gaMonitor, \n                maxiter = 200,\n     popSize = 150,\n                 optimArgs = list(method=\"L-BFGS-B\",\n                                  poptim=1,\n                                  pressel = 0.5,\n                                  control=list(fnscale=-1)),\n                 optim = FALSE\n     )\n}\n\nfor (timestamp in 1:length(possibleTimes)){\n  for (value in 1:length(collectedValues)){\n    avrInTime[timestamp,value] <- mean(resultsInTime[,timestamp,value], na.rm = TRUE)\n  }\n}\n\n# new function for monitoring within RStudio\n# gaMonitor <- function(object, digits = getOption(\"digits\"), ...)\n# { \n#   fitness <- na.exclude(object@fitness)\n#   sumryStat <- c(mean(fitness), max(fitness))\n#   sumryStat <- format(sumryStat, digits = digits)\n#   replicate(2, clearConsoleLine()) \n#   cat(paste(\"\\rGA | iter =\", object@iter, \"\\n\")) \n#   cat(paste(\"Mean =\", sumryStat[1], \"| Best =\", sumryStat[2], \"\\n\"))\n#   flush.console()\n# }\n\n\n",
    "created" : 1494267915912.000,
    "dirty" : false,
    "encoding" : "CP1250",
    "folds" : "",
    "hash" : "2930194319",
    "id" : "46EA239B",
    "lastKnownWriteTime" : 1494281446,
    "last_content_update" : 1494281446774,
    "path" : "P:/Pwr_projects/PracaMagisterska/repo/R/workspace/ga_test.R",
    "project_path" : "ga_test.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}